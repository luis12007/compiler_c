SOURCE -> INCLUDEBLOCK DEFINEBLOCK FUNCTIONBLOCK MAINFUNCTION

INCLUDEBLOCK -> INCLUDESTATEMENT INCLUDEBLOCK | ɛ
DEFINEBLOCK -> DEFINESTATEMENT DEFINEBLOCK | ɛ
FUNCTIONBLOCK -> FUNCDEC FUNCTIONBLOCK | ɛ

STATEMENT -> INITLINE STATEMENT | SWITCHSTATEMENT STATEMENT | CONDITIONAL STATEMENT | LOOPSTATEMENT STATEMENT | VARCHANGELINE STATEMENT | ɛ

CONDITION -> VARNAME CONDOPERATOR VARNAME | VARNAME CONDOPERATOR VARVAL | VARVAL CONDOPERATOR VARNAME | VARVAL CONDOPERATOR VARVAL | (0 + 1) | (true + false) | ! CONDITION
CONDOPERATOR -> == | < | <= | > | >=

CONDITIONAL -> if(CONDITION){STATEMENT}ELSE
ELSE -> else CONDITIONAL | else {STATEMENT} | ɛ

SWITCHSTATEMENT -> switch(VARNAME){SWITCHCASELIST}
SWITCHCASELIST -> SWITCHCASE SWITCHCASELIST | SWITCHCASE | default: STATEMENT break;
SWITCHCASE -> case VARVAL: STATEMENT break; 

LOOPSTATEMENT -> FORLOOP | WHILELOOP | DOWHILELOOP

FORLOOP -> for(FORVAR; CONDITION; VARCHANGESTATEMENT){STATEMENT}
FORVAR -> INITSTATEMENT | VARNAME

WHILELOOP -> while(CONDITION){STATEMENT}
DOWHILELOOP -> do{STATEMENT}while(CONDITION)

VARNAME -> [a-zA-Z_][a-zA-Z0-9_]*
KEYWORD -> static | const | volatile | inline | ɛ
INCLUDESTATEMENT -> #include <VARNAME> | #include STRINGVAL
DEFINESTATEMENT -> #define VARNAME VARNAME | #define VARNAME {STATEMENT} | #define FUNCTION
RETURNSTATEMENT -> return VARVAL;

INITLINE -> KEYWORD INITSTATEMENT
INITLIST -> INITSTATEMENT INITLIST | ɛ
INITSTATEMENT -> INTINIT | FLOATINIT | CHARINIT | STRINGINIT | DOUBLEINIT | LONGINIT | SHORTINIT

INTINIT -> int VARNAME INTLIST; | int VARNAME = INTVAL INTLIST;
FLOATINIT -> float VARNAME FLOATLIST; | float VARNAME = FLOATVAL FLOATLIST;
CHARINIT -> char VARNAME CHARLIST; | char VARNAME = CHARVAL CHARLIST;
STRINGINIT -> string VARNAME STRINGLIST; | string VARNAME = STRINGVAL STRINGLIST;
DOUBLEINIT -> double VARNAME DOUBLELIST; | double VARNAME = DOUBLEVAL DOUBLELIST;
LONGINIT -> long VARNAME LONGLIST; | long VARNAME  = INTVAL LONGLIST;
SHORTINIT -> short VARNAME SHORTLIST; | short VARNAME = INTVAL SHORTLIST;

VARLIST -> VARNAME, VARLIST | VARNAME
INTLIST -> , VARNAME INTLIST | , VARNAME = INTVAL INTLIST | ɛ
FLOATLIST -> , VARNAME FLOATLIST | , VARNAME = FLOATVAL FLOATLIST | ɛ
CHARLIST -> , VARNAME CHARLIST | , VARNAME = CHARVAL CHARLIST | ɛ
STRINGLIST -> , VARNAME STRINGLIST | , VARNAME = STRINGVAL STRINGLIST | ɛ
DOUBLELIST -> , VARNAME DOUBLELIST | , VARNAME = DOUBLEVAL DOUBLELIST | ɛ
LONGLIST -> , VARNAME LONGLIST | , VARNAME = INTVAL LONGLIST | ɛ
SHORTLIST -> , VARNAME SHORTLIST | , VARNAME = INTVAL SHORTLIST | ɛ

VARVAL = INTVAL | FLOATVAL | CHARVAL | STRINGVAL | DOUBLEVAL
INTVAL -> [0-9][0-9]*
FLOATVAL -> [0-9][0-9]*.[0-9]* | [0-9][0-9]*f | INTVAL
CHARVAL -> '[a-zA-Z0-9$&+,:;=?@#|'<>.^*()%!-]*'
STRINGVAL -> "[a-zA-Z0-9$&+,:;=?@#|'<>.^*()%!-]*"
DOUBLEVAL -> [0-9][0-9]*.[0-9]* | [0-9][0-9]*d | INTVAL

MAINFUNCTION -> FUNCTYPE main(INITLIST){STATEMENT RETURNSTATEMENT} | void main(INITLIST){STATEMENT}
FUNCDEC -> FUNCTYPE FUNCTION | void VARNAME(INITLIST){STATEMENT}
FUNCTION -> VARNAME(INITLIST){STATEMENT RETURNSTATEMENT}
FUNCTYPE -> int | float | char | string | double | long | short

VARCHANGELINE -> VARCHANGESTATEMENT;
VARCHANGESTATEMENT -> INCREMENT | DECREMENT | VALOPERATION | VAROPERATION

INCREMENT -> VARNAME++ | ++VARNAME
DECREMENT -> VARNAME-- | --VARNAME
VALOPERATION -> VARNAME VALOPERATOR VARVAL VAROPLIST | VARNAME VALOPERATOR VARNAME VAROPLIST
VALOPERATOR -> += | *= | -= | /=
VAROPERATION -> VARNAME = VARVAL VAROPLIST
VAROPLIST -> VAROPERATOR VARNAME VAROPLIST | VAROPERATOR VARVAL VAROPLIST | ɛ
VAROPERATOR -> + | - | * | /