SOURCE -> SOURCEBLOCK -> MAINFUNCTION
SOURCEBLOCK -> INCLUDEBLOCK -> SOURCEBLOCK
INCLUDEBLOCK -> INCLUDESTATEMENT -> INCLUDEBLOCK
INCLUDESTATEMENT -> #include -> < -> VARNAME -> . -> VARNAME -> > -> #include
<
VARNAME -> stdio -> .
VARNAME -> h -> >
INCLUDEBLOCK -> ɛ
SOURCEBLOCK -> DEFINEBLOCK -> SOURCEBLOCK
DEFINEBLOCK -> DEFINESTATEMENT -> DEFINEBLOCK
DEFINESTATEMENT -> #define -> VARNAME -> DEFINEBODY -> #define
VARNAME -> vector
DEFINEBODY -> < -> VARNAME -> > -> VARNAME -> <
VARNAME -> int -> >
VARNAME -> vi
DEFINEBLOCK -> DEFINESTATEMENT -> DEFINEBLOCK
DEFINESTATEMENT -> #define -> VARNAME -> DEFINEBODY -> #define
VARNAME -> loop
DEFINEBODY -> PARAM_MACRO_BODY
PARAM_MACRO_BODY -> ( -> PARAMLIST -> ) -> MACRO_BODY -> (
PARAMLIST -> VARNAME -> PARAMLIST'
VARNAME -> x
PARAMLIST' -> , -> PARAMLIST -> ,
PARAMLIST -> VARNAME -> PARAMLIST'
VARNAME -> n
PARAMLIST' -> ɛ -> )
MACRO_BODY -> for -> ( -> FORVAR -> ; -> CONDITION -> ; -> VARCHANGESTATEMENT -> ) -> for
(
FORVAR -> INITSTATEMENT
INITSTATEMENT -> INTINIT
INTINIT -> int -> VARNAME -> INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> int
VARNAME -> x
INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> EXPRESSION_INT -> INTLIST -> =
EXPRESSION_INT -> TERM_INT -> EXPRESSION_TAIL
TERM_INT -> 0
EXPRESSION_TAIL -> ɛ
INTLIST -> ɛ -> ;
CONDITION -> SIMPLE_CONDITION
SIMPLE_CONDITION -> EXPRESSION -> CONDOPERATOR -> EXPRESSION
EXPRESSION -> VARNAME
VARNAME -> x
CONDOPERATOR -> < -> OREQUAL -> <
OREQUAL -> ɛ
EXPRESSION -> VARNAME
VARNAME -> n -> ;
VARCHANGESTATEMENT -> VARIABLE_MODIFICATION -> VARNAME
VARIABLE_MODIFICATION -> + -> MOD_EQUAL -> +
MOD_EQUAL -> + -> +
VARNAME -> x -> )
DEFINEBLOCK -> DEFINESTATEMENT -> DEFINEBLOCK
DEFINESTATEMENT -> #define -> VARNAME -> DEFINEBODY -> #define
VARNAME -> macro
DEFINEBODY -> PARAM_MACRO_BODY
PARAM_MACRO_BODY -> ( -> PARAMLIST -> ) -> MACRO_BODY -> (
PARAMLIST -> VARNAME -> PARAMLIST'
VARNAME -> x
PARAMLIST' -> ɛ -> )
MACRO_BODY -> ( -> CONDITION -> ) -> (
CONDITION -> SIMPLE_CONDITION
SIMPLE_CONDITION -> EXPRESSION -> CONDOPERATOR -> EXPRESSION
EXPRESSION -> VARNAME
VARNAME -> x
CONDOPERATOR -> < -> OREQUAL -> <
OREQUAL -> ɛ
EXPRESSION -> INTVAL -> FLOAT_AUX
INTVAL -> 10
FLOAT_AUX -> ɛ -> )
DEFINEBLOCK -> DEFINESTATEMENT -> DEFINEBLOCK
DEFINESTATEMENT -> #define -> VARNAME -> DEFINEBODY -> #define
VARNAME -> macro3
DEFINEBODY -> PARAM_MACRO_BODY
PARAM_MACRO_BODY -> ( -> PARAMLIST -> ) -> MACRO_BODY -> (
PARAMLIST -> VARNAME -> PARAMLIST'
VARNAME -> x
PARAMLIST' -> ɛ -> )
MACRO_BODY -> ( -> CONDITION -> ) -> (
CONDITION -> SIMPLE_CONDITION
SIMPLE_CONDITION -> EXPRESSION -> CONDOPERATOR -> EXPRESSION
EXPRESSION -> VARNAME
VARNAME -> x
CONDOPERATOR -> * -> OREQUAL -> *
OREQUAL -> ɛ
EXPRESSION -> INTVAL -> FLOAT_AUX
INTVAL -> 10
FLOAT_AUX -> ɛ -> )
DEFINEBLOCK -> ɛ
SOURCEBLOCK -> FUNCTIONBLOCK -> SOURCEBLOCK
FUNCTIONBLOCK -> FUNCDEC -> FUNCTIONBLOCK
FUNCDEC -> FUNCTYPE -> FUNCTION
FUNCTYPE -> int -> int
FUNCTION -> VARNAME -> ( -> FUNCINIT -> ) -> { -> STATEMENT -> RETURNSTATEMENT -> }
VARNAME -> factorial -> (
FUNCINIT -> FUNCINITSTATEMENT -> FUNCINIT'
FUNCINITSTATEMENT -> FUNCINTINIT
FUNCINTINIT -> int -> VARNAME -> FUNCINTAUX -> int
VARNAME -> n
FUNCINTAUX -> ɛ
FUNCINIT' -> ɛ -> )
{
STATEMENT -> INITLIST -> STATEMENT
INITLIST -> INITSTATEMENT -> INITLIST' -> ;
INITSTATEMENT -> INTINIT
INTINIT -> int -> VARNAME -> INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> int
VARNAME -> result
INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> EXPRESSION_INT -> INTLIST -> =
EXPRESSION_INT -> TERM_INT -> EXPRESSION_TAIL
TERM_INT -> 1
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> . -> .
TERM_INT -> 2
EXPRESSION_TAIL -> ɛ
INTLIST -> , -> VARNAME -> INTLIST -> ,
VARNAME -> result2
INTLIST -> = -> INTVAL -> INTLIST -> =
INTVAL -> 2
INTLIST -> ɛ
INITLIST' -> ɛ -> ;
STATEMENT -> INITLIST -> STATEMENT
INITLIST -> INITSTATEMENT -> INITLIST' -> ;
INITSTATEMENT -> FLOATINIT
FLOATINIT -> float -> VARNAME -> FLOATLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> float
VARNAME -> result2
FLOATLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> EXPRESSION_FLOAT -> FLOATLIST -> =
EXPRESSION_FLOAT -> TERM_FLOAT -> EXPRESSION_TAIL
TERM_FLOAT -> FLOATVAL
FLOATVAL -> INTVAL -> FLOAT_AUX
INTVAL -> 20
FLOAT_AUX -> . -> FLOAT_AUX -> .
FLOAT_AUX -> INTVAL
INTVAL -> 2
EXPRESSION_TAIL -> ɛ
FLOATLIST -> , -> VARNAME -> FLOATLIST -> ,
VARNAME -> result3
FLOATLIST -> = -> FLOATVAL -> FLOATLIST -> =
FLOATVAL -> INTVAL -> FLOAT_AUX
INTVAL -> 3
FLOAT_AUX -> . -> FLOAT_AUX -> .
FLOAT_AUX -> 3f
FLOATLIST -> ɛ
INITLIST' -> ɛ -> ;
STATEMENT -> INITLIST -> STATEMENT
INITLIST -> INITSTATEMENT -> INITLIST' -> ;
INITSTATEMENT -> CHARINIT
CHARINIT -> char -> VARNAME -> CHARLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> char
VARNAME -> a
CHARLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> CHARVAL -> CHARLIST -> =
CHARVAL -> 'a'
CHARLIST -> ɛ
INITLIST' -> ɛ -> ;
STATEMENT -> INITLIST -> STATEMENT
INITLIST -> INITSTATEMENT -> INITLIST' -> ;
INITSTATEMENT -> FLOATINIT
FLOATINIT -> float -> VARNAME -> FLOATLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> float
VARNAME -> eq
FLOATLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> EXPRESSION_FLOAT -> FLOATLIST -> =
EXPRESSION_FLOAT -> TERM_FLOAT -> EXPRESSION_TAIL
TERM_FLOAT -> FLOATVAL
FLOATVAL -> INTVAL -> FLOAT_AUX
INTVAL -> 2
FLOAT_AUX -> . -> FLOAT_AUX -> .
FLOAT_AUX -> INTVAL
INTVAL -> 2
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> / -> /
TERM_INT -> 3
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> . -> .
TERM_INT -> 3
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> * -> *
TERM_INT -> VARNAME
VARNAME -> result
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> ^ -> ^
TERM_INT -> ɛ
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> - -> -
TERM_INT -> 2
EXPRESSION_TAIL -> ɛ
FLOATLIST -> ɛ
INITLIST' -> ɛ -> ;
STATEMENT -> INITLIST -> STATEMENT
INITLIST -> INITSTATEMENT -> INITLIST' -> ;
INITSTATEMENT -> INTINIT
INTINIT -> int -> VARNAME -> INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> int
VARNAME -> sum
INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> EXPRESSION_INT -> INTLIST -> =
EXPRESSION_INT -> TERM_INT -> EXPRESSION_TAIL
TERM_INT -> VARNAME
VARNAME -> result
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> / -> /
TERM_INT -> 1
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> . -> .
TERM_INT -> 4
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> + -> +
TERM_INT -> VARNAME
VARNAME -> result3
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> + -> +
TERM_INT -> 2
EXPRESSION_TAIL -> ɛ
INTLIST -> ɛ
INITLIST' -> ɛ -> ;
STATEMENT -> INITLIST -> STATEMENT
INITLIST -> INITSTATEMENT -> INITLIST' -> ;
INITSTATEMENT -> FLOATINIT
FLOATINIT -> float -> VARNAME -> FLOATLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> float
VARNAME -> sum2
FLOATLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> EXPRESSION_FLOAT -> FLOATLIST -> =
EXPRESSION_FLOAT -> TERM_FLOAT -> EXPRESSION_TAIL
TERM_FLOAT -> VARNAME
VARNAME -> result2
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> + -> +
TERM_INT -> VARNAME
VARNAME -> result3
EXPRESSION_TAIL -> OPERATOR -> TERM_INT -> EXPRESSION_TAIL
OPERATOR -> + -> +
TERM_INT -> 3
EXPRESSION_TAIL -> ɛ
FLOATLIST -> ɛ
INITLIST' -> ɛ -> ;
STATEMENT -> FORLOOP
FORLOOP -> for -> ( -> FORVAR -> ; -> CONDITION -> ; -> VARCHANGESTATEMENT -> ) -> { -> STATEMENT -> } -> STATEMENT -> for
(
FORVAR -> INITSTATEMENT
INITSTATEMENT -> INTINIT
INTINIT -> int -> VARNAME -> INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> int
VARNAME -> i
INTLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> EXPRESSION_INT -> INTLIST -> =
EXPRESSION_INT -> TERM_INT -> EXPRESSION_TAIL
TERM_INT -> 1
EXPRESSION_TAIL -> ɛ
INTLIST -> ɛ -> ;
CONDITION -> SIMPLE_CONDITION
SIMPLE_CONDITION -> EXPRESSION -> CONDOPERATOR -> EXPRESSION
EXPRESSION -> VARNAME
VARNAME -> i
CONDOPERATOR -> < -> OREQUAL -> <
OREQUAL -> = -> =
EXPRESSION -> VARNAME
VARNAME -> n -> ;
VARCHANGESTATEMENT -> VARNAME -> VARIABLE_MODIFICATION
VARNAME -> i
VARIABLE_MODIFICATION -> + -> MOD_EQUAL -> +
MOD_EQUAL -> + -> +
)
{
STATEMENT -> VARNAME -> VARNAMELINE -> STATEMENT
VARNAME -> result
VARNAMELINE -> VARCHANGESTATEMENT -> ;
VARCHANGESTATEMENT -> VARIABLE_MODIFICATION
VARIABLE_MODIFICATION -> = -> ARITH_EXPR -> =
ARITH_EXPR -> TERM -> ARITH_EXPR'
TERM -> FACTOR
FACTOR -> VARNAME
VARNAME -> result
ARITH_EXPR' -> * -> TERM -> ARITH_EXPR' -> *
TERM -> FACTOR
FACTOR -> VARNAME
VARNAME -> i
ARITH_EXPR' -> ɛ -> ;
STATEMENT -> ɛ -> }
STATEMENT -> IF -> STATEMENT
IF -> if -> ( -> CONDITION -> ) -> { -> STATEMENT -> } -> ELSE -> if
(
CONDITION -> SIMPLE_CONDITION
SIMPLE_CONDITION -> EXPRESSION -> CONDOPERATOR -> EXPRESSION
EXPRESSION -> VARNAME
VARNAME -> result2
CONDOPERATOR -> > -> OREQUAL -> >
OREQUAL -> = -> =
EXPRESSION -> INTVAL -> FLOAT_AUX
INTVAL -> 10
FLOAT_AUX -> . -> FLOAT_AUX -> .
FLOAT_AUX -> INTVAL
INTVAL -> 0 -> )
{
STATEMENT -> VARNAME -> VARNAMELINE -> STATEMENT
VARNAME -> result
VARNAMELINE -> VARCHANGESTATEMENT -> ;
VARCHANGESTATEMENT -> VARIABLE_MODIFICATION
VARIABLE_MODIFICATION -> = -> ARITH_EXPR -> =
ARITH_EXPR -> TERM -> ARITH_EXPR'
TERM -> FACTOR
FACTOR -> INTVAL
INTVAL -> 10
ARITH_EXPR' -> ɛ -> ;
STATEMENT -> INITLIST -> STATEMENT
INITLIST -> INITSTATEMENT -> INITLIST' -> ;
INITSTATEMENT -> CHARINIT
CHARINIT -> char -> VARNAME -> CHARLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> char
VARNAME -> b
CHARLIST_NO_ASSIGNMENT_OR_WITH_ASSIGNMENT -> = -> CHARVAL -> CHARLIST -> =
CHARVAL -> 'b'
CHARLIST -> ɛ
INITLIST' -> ɛ -> ;
STATEMENT -> ɛ -> }
ELSE -> else -> ELSEIF -> else
ELSEIF -> { -> STATEMENT -> } -> {
STATEMENT -> VARNAME -> VARNAMELINE -> STATEMENT
VARNAME -> result
VARNAMELINE -> VARCHANGESTATEMENT -> ;
VARCHANGESTATEMENT -> VARIABLE_MODIFICATION
VARIABLE_MODIFICATION -> = -> ARITH_EXPR -> =
ARITH_EXPR -> TERM -> ARITH_EXPR'
TERM -> FACTOR
FACTOR -> INTVAL
INTVAL -> 20
ARITH_EXPR' -> ɛ -> ;
STATEMENT -> ɛ -> }
STATEMENT -> ɛ
RETURNSTATEMENT -> return -> OPTIONAL_VARVAL -> ; -> return
OPTIONAL_VARVAL -> ARITH_EXPR
ARITH_EXPR -> TERM -> ARITH_EXPR'
TERM -> FACTOR
FACTOR -> VARNAME
VARNAME -> result
ARITH_EXPR' -> ɛ -> ;
}
FUNCTIONBLOCK -> FUNCDEC -> FUNCTIONBLOCK
FUNCDEC -> FUNCTYPE -> VOID_FUNCTION
FUNCTYPE -> void -> void
VOID_FUNCTION -> ɛ
FUNCTIONBLOCK -> ɛ
SOURCEBLOCK -> ɛ
MAINFUNCTION -> main -> ( -> FUNCINIT -> ) -> { -> STATEMENT -> RETURNSTATEMENT -> } -> SOURCEBLOCK -> main
(
FUNCINIT -> ɛ -> )
{
STATEMENT -> VARNAME -> VARNAMELINE -> STATEMENT
VARNAME -> factorial
VARNAMELINE -> ( -> PARAMLIST -> ) -> ; -> (
PARAMLIST -> ARITH_EXPR -> PARAMLIST'
ARITH_EXPR -> TERM -> ARITH_EXPR'
TERM -> FACTOR
FACTOR -> INTVAL
INTVAL -> 1
ARITH_EXPR' -> ɛ
PARAMLIST' -> ɛ -> )
;
STATEMENT -> ɛ
RETURNSTATEMENT -> return -> OPTIONAL_VARVAL -> ; -> return
OPTIONAL_VARVAL -> ɛ -> ;
}
SOURCEBLOCK -> ɛ -> $