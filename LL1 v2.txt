SOURCE -> INCLUDEBLOCK DEFINEBLOCK FUNCTIONBLOCK MAINFUNCTION
INCLUDEBLOCK -> INCLUDESTATEMENT INCLUDEBLOCK 
INCLUDEBLOCK -> ɛ
DEFINEBLOCK -> DEFINESTATEMENT DEFINEBLOCK 
DEFINEBLOCK -> ɛ
FUNCTIONBLOCK -> FUNCDEC FUNCTIONBLOCK 
FUNCTIONBLOCK -> ɛ
STATEMENT -> INITLINE STATEMENT 
STATEMENT -> SWITCHSTATEMENT STATEMENT 
STATEMENT -> CONDITIONAL STATEMENT 
STATEMENT -> LOOPSTATEMENT STATEMENT 
STATEMENT -> VARCHANGELINE STATEMENT 
STATEMENT -> RETURNSTATEMENT STATEMENT 
STATEMENT -> ɛ
CONDITION -> VARNAME CONDOPERATOR VARNAME 
CONDITION -> VARNAME CONDOPERATOR VARVAL 
CONDITION -> VARVAL CONDOPERATOR VARNAME 
CONDITION -> VARVAL CONDOPERATOR VARVAL 
CONDITION -> (0 + 1) 
CONDITION -> (true + false)
CONDITION -> ! CONDITION
CONDOPERATOR -> ==
CONDOPERATOR -> <
CONDOPERATOR -> <= 
CONDOPERATOR -> > 
CONDOPERATOR -> >=
CONDITIONAL -> if( CONDITION ){ STATEMENT } ELSE
ELSE -> else CONDITIONAL 
ELSE -> else { STATEMENT } 
ELSE -> ɛ
SWITCHSTATEMENT -> switch( VARNAME ){ SWITCHCASELIST }
SWITCHCASELIST -> SWITCHCASE SWITCHCASELIST 
SWITCHCASELIST -> SWITCHCASE 
SWITCHCASELIST -> default: STATEMENT break;
SWITCHCASE -> case VARVAL: STATEMENT break; 
LOOPSTATEMENT -> FORLOOP 
LOOPSTATEMENT -> WHILELOOP 
LOOPSTATEMENT -> DOWHILELOOP
FORLOOP -> for( FORVAR ;  CONDITION ; VARCHANGESTATEMENT ){ STATEMENT }
FORVAR -> INITSTATEMENT 
FORVAR -> VARNAME
WHILELOOP -> while( CONDITION ){ STATEMENT }
DOWHILELOOP -> do{ STATEMENT }while( CONDITION )
VARNAME -> [a-zA-Z_][a-zA-Z0-9_]*
KEYWORD -> static 
KEYWORD -> const 
KEYWORD -> volatile 
KEYWORD -> inline 
KEYWORD -> ɛ
INCLUDESTATEMENT -> #include < VARNAME > 
INCLUDESTATEMENT -> #include STRINGVAL
DEFINESTATEMENT -> #define VARNAME VARNAME 
DEFINESTATEMENT -> #define VARNAME { STATEMENT } 
DEFINESTATEMENT -> #define FUNCTION
RETURNSTATEMENT -> return VARVAL ;
RETURNSTATEMENT -> return;
INITLINE -> KEYWORD INITSTATEMENT
INITLIST -> INITSTATEMENT INITLIST 
INITLIST -> ɛ
INITSTATEMENT -> INTINIT 
INITSTATEMENT -> FLOATINIT 
INITSTATEMENT -> CHARINIT 
INITSTATEMENT -> STRINGINIT 
INITSTATEMENT -> DOUBLEINIT 
INITSTATEMENT -> LONGINIT 
INITSTATEMENT -> SHORTINIT
INTINIT -> int VARNAME INTLIST; 
INTINIT -> int VARNAME = INTVAL INTLIST;
FLOATINIT -> float VARNAME FLOATLIST; 
FLOATINIT -> float VARNAME = FLOATVAL FLOATLIST;
CHARINIT -> char VARNAME CHARLIST; 
CHARINIT -> char VARNAME = CHARVAL CHARLIST;
STRINGINIT -> string VARNAME STRINGLIST; 
STRINGINIT -> string VARNAME = STRINGVAL STRINGLIST;
DOUBLEINIT -> double VARNAME DOUBLELIST; 
DOUBLEINIT -> double VARNAME = DOUBLEVAL DOUBLELIST;
LONGINIT -> long VARNAME LONGLIST; 
LONGINIT -> long VARNAME  = INTVAL LONGLIST;
SHORTINIT -> short VARNAME SHORTLIST; 
SHORTINIT -> short VARNAME = INTVAL SHORTLIST;
VARLIST -> VARNAME, VARLIST 
VARLIST -> VARNAME
INTLIST -> , VARNAME INTLIST 
INTLIST -> , VARNAME = INTVAL INTLIST 
INTLIST -> ɛ
FLOATLIST -> , VARNAME FLOATLIST 
FLOATLIST -> , VARNAME = FLOATVAL FLOATLIST 
FLOATLIST -> ɛ
CHARLIST -> , VARNAME CHARLIST 
CHARLIST -> , VARNAME = CHARVAL CHARLIST 
CHARLIST -> ɛ
STRINGLIST -> , VARNAME STRINGLIST 
STRINGLIST -> , VARNAME = STRINGVAL STRINGLIST 
STRINGLIST -> ɛ
DOUBLELIST -> , VARNAME DOUBLELIST 
DOUBLELIST -> , VARNAME = DOUBLEVAL DOUBLELIST 
DOUBLELIST -> ɛ
LONGLIST -> , VARNAME LONGLIST 
LONGLIST -> , VARNAME = INTVAL LONGLIST 
LONGLIST -> ɛ
SHORTLIST -> , VARNAME SHORTLIST 
SHORTLIST -> , VARNAME = INTVAL SHORTLIST 
SHORTLIST -> ɛ
VARVAL -> INTVAL 
VARVAL -> FLOATVAL 
VARVAL -> CHARVAL 
VARVAL -> STRINGVAL 
VARVAL -> DOUBLEVAL
INTVAL -> [0-9][0-9]*
FLOATVAL -> [0-9][0-9]*.[0-9]* 
FLOATVAL -> [0-9][0-9]*f 
FLOATVAL -> INTVAL
CHARVAL -> '[a-zA-Z0-9$&+,:;=?@#|'<>.^*()%!-]*'
STRINGVAL -> "[a-zA-Z0-9$&+,:;=?@#|'<>.^*()%!-]*"
DOUBLEVAL -> [0-9][0-9]*.[0-9]* 
DOUBLEVAL -> [0-9][0-9]*d 
DOUBLEVAL -> INTVAL
MAINFUNCTION -> FUNCTYPE main( INITLIST ){ STATEMENT RETURNSTATEMENT } 
MAINFUNCTION -> void main( INITLIST ){ STATEMENT RETURNSTATEMENT }
FUNCDEC -> FUNCTYPE FUNCTION 
FUNCTION -> VARNAME ( INITLIST ){ STATEMENT RETURNSTATEMENT }
FUNCTYPE -> int 
FUNCTYPE -> float 
FUNCTYPE -> char 
FUNCTYPE -> string 
FUNCTYPE -> double 
FUNCTYPE -> long 
FUNCTYPE -> short 
FUNCTYPE -> void
VARCHANGELINE -> VARCHANGESTATEMENT ;
VARCHANGESTATEMENT -> INCREMENT 
VARCHANGESTATEMENT -> DECREMENT 
VARCHANGESTATEMENT -> VALOPERATION 
VARCHANGESTATEMENT -> VAROPERATION
INCREMENT -> VARNAME ++ 
INCREMENT -> ++ VARNAME
DECREMENT -> VARNAME -- 
DECREMENT -> -- VARNAME
VALOPERATION -> VARNAME VALOPERATOR VARVAL VAROPLIST 
VALOPERATION -> VARNAME VALOPERATOR VARNAME VAROPLIST
VALOPERATOR -> += 
VALOPERATOR -> *= 
VALOPERATOR -> -= 
VALOPERATOR -> /=
VAROPERATION -> VARNAME = VARVAL VAROPLIST
VAROPLIST -> VAROPERATOR VARNAME VAROPLIST 
VAROPLIST -> VAROPERATOR VARVAL VAROPLIST 
VAROPLIST -> ɛ
VAROPERATOR -> + 
VAROPERATOR -> - 
VAROPERATOR -> * 
VAROPERATOR -> /